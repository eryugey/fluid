{{- $hostNetwork := .Values.worker.hostNetwork }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ template "cachefs.fullname" . }}-worker
  labels:
    app: {{ template "cachefs.name" . }}
    chart: {{ template "cachefs.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
    role: cachefs-worker
    fluid.io/dataset: {{ .Release.Namespace }}-{{ .Release.Name }}
    fluid.io/dataset-placement: {{ .Values.placement }}
  ownerReferences:
  {{- if .Values.owner.enabled }}
    - apiVersion: {{ .Values.owner.apiVersion }}
      blockOwnerDeletion: {{ .Values.owner.blockOwnerDeletion }}
      controller: {{ .Values.owner.controller }}
      kind: {{ .Values.owner.kind }}
      name: {{ .Values.owner.name }}
      uid: {{ .Values.owner.uid }}
  {{- end }}
spec:
  replicas: {{ .Values.worker.replicas }}
  serviceName: {{ template "cachefs.fullname" . }}-worker
  podManagementPolicy: {{ .Values.worker.podManagementPolicy }}
  selector:
    matchLabels:
      app: {{ template "cachefs.name" . }}
      chart: {{ template "cachefs.chart" . }}
      release: {{ .Release.Name }}
      heritage: {{ .Release.Service }}
      role: cachefs-worker
  template:
    metadata:
      annotations:
        sidecar.istio.io/inject: "false"
      {{- if .Values.worker.annotations }}
      {{- range $key, $val := .Values.worker.annotations}}
        {{ $key | quote }}: {{ $val | quote }}
      {{- end }}
      {{- end }}
      labels:
        app: {{ template "cachefs.name" . }}
        chart: {{ template "cachefs.chart" . }}
        release: {{ .Release.Name }}
        heritage: {{ .Release.Service }}
        role: cachefs-worker
        fluid.io/dataset: {{ .Release.Namespace }}-{{ .Release.Name }}
        fluid.io/dataset-placement: {{ .Values.placement }}
        {{- if .Values.worker.labels }}
        {{- range $key, $val := .Values.worker.labels }}
        {{ $key | quote}}: {{ $val | quote }}
        {{- end }}
        {{- end }}
    spec:
      {{- if .Values.worker.hostNetwork }}
      hostNetwork: {{ $hostNetwork }}
      dnsPolicy: ClusterFirstWithHostNet
      {{- end }}
      nodeSelector:
      {{- if .Values.worker.nodeSelector }}
{{ toYaml .Values.worker.nodeSelector | trim | indent 8  }}
      {{- else if .Values.nodeSelector }}
{{ toYaml .Values.nodeSelector | trim | indent 8  }}
      {{- end }}
      {{- if .Values.tolerations }}
      tolerations:
{{ toYaml .Values.tolerations | indent 8 }}
      {{- end }}
      containers:
        - name: cachefs-worker
          image: {{ .Values.image }}:{{ .Values.imageTag }}
          imagePullPolicy: {{ .Values.imagePullPolicy }}
          {{- if .Values.worker.resources  }}
          resources:
{{ toYaml .Values.worker.resources | trim | indent 12  }}
          {{- end }}
          command: ["sh", "/root/script/script.sh"]
          securityContext:
            runAsUser: 0
          {{- if .Values.worker.privileged }}
            privileged: true
          {{- end }}
          ports:
          {{- if .Values.worker.metricsPort }}
            - containerPort: {{ .Values.worker.metricsPort }}
              name: metrics
              protocol: TCP
          {{- end }}
          env:
          - name: CFS_FOREGROUND
            value: "1"
          {{- if .Values.worker.envs }}
{{ toYaml .Values.worker.envs | trim | indent 10  }}
          {{- end }}
          {{- if .Values.configs.metaurlSecret }}
          - name: METAURL
            valueFrom:
              secretKeyRef:
                name: {{ .Values.configs.metaurlSecret }}
                key: {{ .Values.configs.metaurlSecretKey }}
          {{- end }}
          {{- if and .Values.configs.encryptEnvOptions (gt (len .Values.configs.encryptEnvOptions) 0) }}
            {{- range $encryptEnvOption := .Values.configs.encryptEnvOptions }}
          - name: {{ $encryptEnvOption.envName }}
            valueFrom:
              secretKeyRef:
                name: {{ $encryptEnvOption.secretKeyRefName }}
                key: {{ $encryptEnvOption.secretKeyRefKey }}
            {{- end }}
          {{- end }}
          lifecycle:
            preStop:
              exec:
                command: ["sh", "-c", "umount {{ .Values.worker.mountPath }}"]
          volumeMounts:
            - mountPath: /root/script
              name: script
            {{- if .Values.worker.volumeMounts }}
{{ toYaml .Values.worker.volumeMounts | indent 12 }}
            {{- end }}
      restartPolicy: Always
      volumes:
        - name: script
          configMap:
            name: {{ template "cachefs.fullname" . }}-worker-script
            defaultMode: 0755
        {{- if .Values.worker.volumes }}
{{ toYaml .Values.worker.volumes | indent 8 }}
        {{- end }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "cachefs.fullname" . }}-worker-script
  labels:
    app: {{ template "cachefs.name" . }}
    chart: {{ template "cachefs.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
    role: cachefs-worker
  ownerReferences:
  {{- if .Values.owner.enabled }}
  - apiVersion: {{ .Values.owner.apiVersion }}
    blockOwnerDeletion: {{ .Values.owner.blockOwnerDeletion }}
    controller: {{ .Values.owner.controller }}
    kind: {{ .Values.owner.kind }}
    name: {{ .Values.owner.name }}
    uid: {{ .Values.owner.uid }}
  {{- end }}
data:
  script.sh: |
    #!/bin/bash

    {{- if .Values.configs.formatCmd }}
    echo "$(date '+%Y/%m/%d %H:%M:%S').$(printf "%06d" $(echo $(date '+%N')/1000|bc)) cachefs format start."
    {{ .Values.configs.formatCmd }}
    {{- end }}

    echo "$(date '+%Y/%m/%d %H:%M:%S').$(printf "%06d" $(echo $(date '+%N')/1000|bc)) cachefs mount start."
    {{ .Values.worker.command }}
